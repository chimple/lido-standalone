/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    /**
     * <lido-standalone> usage example:
     *   <lido-standalone
     *     base-url="https://example.com/path/to/folder/lido-game"
     *     xml-path="https://example.com/path/to/folder/lido-game/assets/xmlData.xml"
     *     initial-index="2"
     *     canplay="true"
     *     height="75vh"
     *   ></lido-standalone>
     * This attempts to load the external Lido scripts at runtime (from `baseUrl`).
     * If they aren't found, it falls back to loading the Lido npm package
     * and calls defineCustomElements(...) to register <lido-home>.
     */
    interface LidoStandalone {
        /**
          * The public URL where the unzipped Lido code is hosted, e.g. "https://example.com/path/to/lido-game".  Inside that folder, we expect:   - code/lido-player.esm.js   - code/lido-player.js   - assets/ (optional)
         */
        "baseUrl": string;
        /**
          * Whether the <lido-home> can play. Defaults to false.
         */
        "canplay": boolean;
        /**
          * The height prop to pass to <lido-home>. Defaults to "75vh".
         */
        "height": string;
        /**
          * The initial index to pass down to <lido-home>. Defaults to 0.
         */
        "initialIndex": number;
        /**
          * Optional prop for directly providing XML data instead of fetching.
         */
        "xmlData"?: string;
        /**
          * If provided, we'll fetch this XML path once and pass the loaded string to <lido-home>'s `xml-data` attribute.
         */
        "xmlPath"?: string;
    }
}
declare global {
    /**
     * <lido-standalone> usage example:
     *   <lido-standalone
     *     base-url="https://example.com/path/to/folder/lido-game"
     *     xml-path="https://example.com/path/to/folder/lido-game/assets/xmlData.xml"
     *     initial-index="2"
     *     canplay="true"
     *     height="75vh"
     *   ></lido-standalone>
     * This attempts to load the external Lido scripts at runtime (from `baseUrl`).
     * If they aren't found, it falls back to loading the Lido npm package
     * and calls defineCustomElements(...) to register <lido-home>.
     */
    interface HTMLLidoStandaloneElement extends Components.LidoStandalone, HTMLStencilElement {
    }
    var HTMLLidoStandaloneElement: {
        prototype: HTMLLidoStandaloneElement;
        new (): HTMLLidoStandaloneElement;
    };
    interface HTMLElementTagNameMap {
        "lido-standalone": HTMLLidoStandaloneElement;
    }
}
declare namespace LocalJSX {
    /**
     * <lido-standalone> usage example:
     *   <lido-standalone
     *     base-url="https://example.com/path/to/folder/lido-game"
     *     xml-path="https://example.com/path/to/folder/lido-game/assets/xmlData.xml"
     *     initial-index="2"
     *     canplay="true"
     *     height="75vh"
     *   ></lido-standalone>
     * This attempts to load the external Lido scripts at runtime (from `baseUrl`).
     * If they aren't found, it falls back to loading the Lido npm package
     * and calls defineCustomElements(...) to register <lido-home>.
     */
    interface LidoStandalone {
        /**
          * The public URL where the unzipped Lido code is hosted, e.g. "https://example.com/path/to/lido-game".  Inside that folder, we expect:   - code/lido-player.esm.js   - code/lido-player.js   - assets/ (optional)
         */
        "baseUrl"?: string;
        /**
          * Whether the <lido-home> can play. Defaults to false.
         */
        "canplay"?: boolean;
        /**
          * The height prop to pass to <lido-home>. Defaults to "75vh".
         */
        "height"?: string;
        /**
          * The initial index to pass down to <lido-home>. Defaults to 0.
         */
        "initialIndex"?: number;
        /**
          * Optional prop for directly providing XML data instead of fetching.
         */
        "xmlData"?: string;
        /**
          * If provided, we'll fetch this XML path once and pass the loaded string to <lido-home>'s `xml-data` attribute.
         */
        "xmlPath"?: string;
    }
    interface IntrinsicElements {
        "lido-standalone": LidoStandalone;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * <lido-standalone> usage example:
             *   <lido-standalone
             *     base-url="https://example.com/path/to/folder/lido-game"
             *     xml-path="https://example.com/path/to/folder/lido-game/assets/xmlData.xml"
             *     initial-index="2"
             *     canplay="true"
             *     height="75vh"
             *   ></lido-standalone>
             * This attempts to load the external Lido scripts at runtime (from `baseUrl`).
             * If they aren't found, it falls back to loading the Lido npm package
             * and calls defineCustomElements(...) to register <lido-home>.
             */
            "lido-standalone": LocalJSX.LidoStandalone & JSXBase.HTMLAttributes<HTMLLidoStandaloneElement>;
        }
    }
}
